
Typescript
Reactive Programming -rxjs
Angular
Ionic

node :
vscode

.......................................................................................

Typescript:
..........

What is typescript?

 Typescript that scales javascript.
 scaling is nothing but expanding features.

Javascript design approach

-Javascript object based language not Object oriented.
-Javascript is dynamically typed- types of the language is known during runtime.
  -No compile time type checking.


ECMA Standards:
 ES 1,3,4,5
 ES 6

2009, The project was started to make javascript looks like other object oriented langugages
 - classes,interfaces.... : coffee script.

source code would be coffee script
 
 Customer.coffee            
  class,interfaces --compile    --Customer.js

2010, Microsoft started project to create object oriented javascript using C#

static typed javascript.

 C# ---compiler------plain javascript.

Problems with C#
 1.PORTABLITY.
 2.COMPLEXITY

2012, ecma committe published a specfication, ECMA 6 spec
ES 6 Features:
 1.classes
 2.let,const
 3.new literal types
 4.arrow function
 5.new Objects - Promise....
 etc.......

MS Started redesigning the whole project, target ecma 6 as base language.

 ES 6 + Static Typing + added new extra fetures => The brith of Typescript.


Typescript----compile----Plain javascript

Typescript is strongly typed, object oriented  javascript.

Now you can use type script to build better object oriented systems using javascript.


TS is not compititor or replacer for javascript but it complements js.


Object Oriented Principles:
 
1.Abstraction
2.Encaspulation
3.Modualirty
    -breaking the code 
4.Typing
   -polyphism
      -compile - strongly typed
      -runitme - strong typed
5.Hierachy
   -has-a
   -is-a : inheritance
................
6.Concurrency
7.Persistency.

if any programming language follows the first 5 principles 100%, those languages are 
called as "Object oriented Programming" languages

if any language does not implement any one principle or partially, those languages are 
called "Object based language".

/////////////////////////////////////////////////////////////////////////////////////////

Type scrit is a typed superset of javascript that compiles to plain javascript

                  any browser,an host, any os, any device

///////////////////////////////////////////////////////////////////////////////////////////

Lab :

1.nodejs
2.ts compiler 
3.editor - vs code

select your work-dire

>mkdir mytsapps

cd mytsapps

mytsapps> npm init

mytsapps> code .

........................................................................................

TS Compiler:

mytsapps>npm install typescript --save-dev


How to write ts code , compile?

fileName.ts

compiler - tsc

tsc folder/fileName.tsc
tsc src/index.tsc

package.json 
 scripts section

scripts is for java script automation.

scripts: {
 "command" : "Task to executed"
}

if you run the command the task will be executed.

commands are provided by npm by default , those are built in commands
"start"
"test"
"install"
 ........

task:
 "start" : "node index.js"
 
npm start ----->

commands can even be custom commands

"subu"  : "node index.js"

npm run subu

I m going to automate typescript compilation using npm script.

"build": "tsc src/index.ts"

//////////////////////////////////////////////////////////////////////////////////////////

package.json
{
  "name": "mytsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build" : "tsc src/index.ts"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^3.9.5"
  }
}


how to run?

 >npm run build

Execution:

 -on node

  >node src/index.js

browser:
 index.html
   <script src="src/index.js"></script>
////////////////////////////////////////////////////////////////////////////////////////////


vscode tips:

1.save :  file --autosave

2.extensions :
//////////////////////////////////////////////////////////////////////////////////////////////

Compiler options: Advanced:
............................

Use case:

Separate sourcode and compiled code into different directories.

source code
 src
   -index.ts

 build
    -index.js

how to tell the compiler to place compiled code into build folder.

compiler options:

 syntax

  tsc --compileroptions filename

  tsc --outDir build   src/index.ts


{
  "name": "mytsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build" : "tsc --outDir build   src/index.ts"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^3.9.5"
  }
}

********************************************************************************************
How to compile the code automatically ,without compiling code manually?
 we compiler option 
   --watch


 "scripts": {
    "build" : "tsc --watch --outDir build   src/index.ts"
  }

npm run build

**************************************************************************************

what if i want to add more and more compiler options


tsc --watch --outDir build  --options --options  src/index.ts
  
 This is not scaleable, and maintainable. , if configuration grows.

Solution : 
 we need to create simple ts config file where you can place all configurations.

create file called
 tsconfig.json outside src folder, where we can tell all compiler options


{
    "compilerOptions": {
        "outDir": "build",
        "watch": true
    },
    "files": [
        "src/index.ts"
    ]
}
    "build" : "tsc"

////////////////////////////////////////////////////////////////////////////////////////////

Variable declrations,data types,literals:
........................................
var - ES 5
let,const - ES 6


Type script compile ts file into javascript.

The problems with ES 6:

When es6 was introduced, the node and browsers vendors were not ready to accept
es6 keywords
 let ,const never work in older node and browsers.

that time browers were supported only ES 5 version of js.

browsers were not ready that time, but develoers felt,and supported lot on es6.

Then how to run es 6 code on browsers which dont support.

The birth of "Transpilers"  : a special compilers which converts es6 to es5,

developer write code in es6 ---->transpiler-->es 5

eg: babel.js 
 higer version -to lower version
eg : tsc
 es6 to es5
 +
 type verification

         "ts compiler by default converts es6 code into es5."

let---------var

what if i dont to convert es6 to es 5, i want to keep same version?

////////////////////////////////////////////////////////////////////////////////////////

//literals -keyword
//firstName variable
//"Subramanian" is literal
//var firstName="Subramanian";
let firstName = "Subramanian";
console.log(`First Name ${firstName}`);

////////////////////////////////////////////////////////////////////////////////////////
types of literals:
..................
1.number
2.string
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object

number,NaN,infity - number family

based on literals data types have designed.

Types
1.number
2.string
3.boolean
4.void -undefined
5.function
6.object
7.enum
8.Tuple
9.any


// variable declaration

//es 5 style
//var -keyword
//firstName variable
//"Subramanian" is literal
//var firstName="Subramanian";
//string literal
let firstName = "Subramanian";
let lastName = 'Murugan'
//console.log("First Name" + firstName);
console.log(`First Name ${firstName} ${lastName}`);
let title = 'IBM'
let htmlPage =`
    <html>
      <head>
       <title>
          ${title}
       </title>
     </head>
     <body>
      <h1>Welcome</h1>
     </body>
     </html>
`;
console.log(htmlPage);

//numbers : 64 bit size: aka double
let stockValue =1000;
console.log(`Stock value ${stockValue}`);
//undefined
let qty;
console.log(`Qty ${qty}`)
//NaN : it is runtime numerical errors
let totalStockValue = qty * stockValue;
console.log(`Total Stock value ${totalStockValue}`);
let avgStock = stockValue/ 0;
//div /0 : infinity
console.log(`Average Stock value ${avgStock}`);

//booleans
let isActive = true;
let isEnabled =false;

if(isActive){
    console.log('Active')
}else{
    console.log('It is not active')
}

if(isEnabled){
    console.log('isEnabled')
}else{
    console.log('It is not Enabled')
}
//advanced booleans ;
//in js everthing is true exepect the following values
/**
 * falsy values
 * 1.boolean false
 * 2.0
 * 3.undefined
 * 4.NaN
 * 5.null
 * 6.empty string ""/ ''
 */

let message=""; // undefined

if(message){
    console.log('You have message')
}else{
    console.log('You dont have message')
}
//function
let myfunc = function(){
    console.log('myfunc')
};
myfunc();

//null
let employee = null;

//object typelÌ¥
let customer = {
    id:1,
    name:'subramanian'
};

//typeof operator : is used to know the type of varibles
console.log('type vertifications')
console.log(typeof firstName);
console.log(typeof stockValue);
console.log(typeof qty);
console.log(typeof totalStockValue); //NaN
console.log(typeof avgStock); //inifnity
console.log(typeof isEnabled);
console.log(typeof employee);
console.log(typeof customer);
console.log(typeof myfunc);

********************************************************************************************

let variable:type = literal

int a =10;

a = "hello" ;;compiler will throw error : compile time vertification.


Ways of declaring :

1.expilicit
  let variableName:type = value

2.implicit : Type inference

   if any variable is assigned with specific type

 let age =20;
  now variable value is 20, so ts initailizes the type of age is number ,to be verified
in furture assignements

 age=90;
 age ="hess" ;;//error is thrown : type infered.

// type system

//Explicit type declaration
//strings
let firstName:string = "Subramanian";
console.log(`First Name ${firstName}`);
//firstName = 1000;
firstName = "Test";

//numbers
let stockValue:number =100;
stockValue =900;

//booleans
let isEnabled:boolean  =true;
isEnabled  =false;

////////////////////////////////////////////////////////////////////////////////
//implicit type declaration : Type inferance is enabled, based on initail value assigment
let age = 20;
console.log(`Age ${age}`)
age = 18;

//age = "hello"
let isActive= true;
//isActive = "test";
///////////////////////////////////////////////////////////////////////////////////

//here a can hold only numbers
let a:number =10;
//here b can hold only numbers
let b = 10;

//what if i want like javascript : a variable can hold any value during runtime

//any 
let c:any =10;
c="hello"
c=true;

//////////////////////////////////////////////////////////////////////////
//if you declare varible undefined after that if y assign any value,looks like any
let myvar;
//let myvar:any -->it is recommended declaration
myvar =10;
myvar ="hello"
myvar =true;

//if you declare variable with explicit undefined/null type and undefined/null value, no value 
//can be assigned
let myvar2:undefined = undefined;
//myvar2 ="test";
let myvar3:null =null;
//myvar3 ="test";
/////////////////////////////////////////////////////////////////////////////////////////////

functions:

default args =

 -if no value is passed, then default value is used, which may avoid runtime errors.

optional parameters : ?


 -if no value is passed,you skip, compiler errors, but it may cause runtime errors

optionals and defalult cant be put together.




 
//functions : normal ,arrow functions

//first function

function sayHello(){
    console.log('hello')
}
sayHello();
///function with parametes and args

//normal javascript function
// function add(a,b){
//  let c = a + b;
//  console.log(`The Add Result  ${c}`);
// }

//add type ; args type
function add(a:number,b:number){
    let c = a + b;
    console.log(`The Add Result  ${c}`);
}
add(10,10);
//add("test","hello");
//add(); // undefined,undefined
//what if the programmer is not passing input
//default args
function substract(a:number=0,b:number=0){
    let c = a - b;
    console.log(`The Substract Result  ${c}`);

}

//optional arg
function substract1(a?:number,b?:number){
    let c = a - b;
    console.log(`The Substract1 Result  ${c}`);

}
substract(10,2);
//not passed any thing
substract();

substract1();
////////////////////////////////////////////////////////////////////////////////

//return types

//default retun type is void(undefined)
function sayGreeter():void{
    console.log('test')
}
//here return type is decided by return values, if it is number,type would be no
function getStockValue(){
    return 10;
}
//here return type is very strict
function getQty():number{
    return 100
}
sayGreeter()
getQty()
getStockValue();
///////////////////////////////////////////////////////////////////////////////////
let getMydetails = (name?:string,age:number=18):string => 
{
   return `Name ${name} age ${age};`
}
console.log(getMydetails('Subramanian',39));


//functions : normal ,arrow functions

//first function

function sayHello(){
    console.log('hello')
}
sayHello();
///function with parametes and args

//normal javascript function
// function add(a,b){
//  let c = a + b;
//  console.log(`The Add Result  ${c}`);
// }

//add type ; args type
function add(a:number,b:number){
    let c = a + b;
    console.log(`The Add Result  ${c}`);
}
add(10,10);
//add("test","hello");
//add(); // undefined,undefined
//what if the programmer is not passing input
//default args
function substract(a:number=0,b:number=0){
    let c = a - b;
    console.log(`The Substract Result  ${c}`);

}

//optional arg
function substract1(a?:number,b?:number){
    let c = a - b;
    console.log(`The Substract1 Result  ${c}`);

}
substract(10,2);
//not passed any thing
substract();

substract1();
////////////////////////////////////////////////////////////////////////////////

//return types

//default retun type is void(undefined)
function sayGreeter():void{
    console.log('test')
}
//here return type is decided by return values, if it is number,type would be no
function getStockValue(){
    return 10;
}
//here return type is very strict
function getQty():number{
    return 100
}
sayGreeter()
getQty()
getStockValue();
///////////////////////////////////////////////////////////////////////////////////
let getMydetails = (name?:string,age:number=18):string => 
{
   return `Name ${name} age ${age};`
}
console.log(getMydetails('Subramanian',39));

///////////////////////////////////////////////////////////////////////////////////////

Object oriented Programming:

1.class syntax
2.Object as type
3.Encasulation
4.Modualrity


//class

class Employee{
 //instance variables and methods
 id:number =1;
 name:string ='Subramanian'
 //add methods

 calculateSalary(salary:number=0,noofdays:number=0):number{
    return salary * noofdays;
 }

}

let emp = new Employee();

console.log(emp);
console.log(emp.calculateSalary(100,10));


state initalization:

->direct

->after object creation

->through constructor.


//class

//state intialization
// class Employee{
//  //instance variables and methods
//  //direct: hardcoded
//  id:number =1;
//  name:string ='Subramanian'
//  //add methods

//  calculateSalary(salary:number=0,noofdays:number=0):number{
//     return salary * noofdays;
//  }

// }

// class Employee{
//     //instance variables and methods
//     //direct: hardcoded
//     id:number =1;
//     name:string ='Subramanian'
//     //add methods
   
//     calculateSalary(salary:number=0,noofdays:number=0):number{
//        return salary * noofdays;
//     }
   
// }

class Employee{
        //instance variables and methods
        //direct: hardcoded
        id:number ;
        name:string; 

        constructor(id:number=1,name?:string){
            this.id = id;
            this.name = name;
        }
        //add methods
               calculateSalary(salary:number=0,noofdays:number=0):number{
           return salary * noofdays;
        }
       
    }


let emp = null;

emp = new Employee(); //no values are passed
//after object creation
console.log(emp);
console.log(emp.calculateSalary(100,10));

emp = new Employee(2,'Karthik'); // values are passed
//after object creation
console.log(emp);
console.log(emp.calculateSalary(100,20));


emp = new Employee(4,'John'); // values are passed
//after object creation
console.log(emp);
console.log(emp.calculateSalary(100,20));

////////////////////////////////////////////////////////////////////////////////////////////

Encasulation:

What is encasulation?

To Prevent code sharing from code to another.

code - collection of classes, variables,functions,......

code is represented inside file.

pl provides keywords to ensure that , how  we can allow the code to be shared

TS provides keywords to prevent code sharing
 
 -public - any where
 -private - with in class 
 -protected - with in class + inheritance

only class members are public/private/protected.

if you declare any member(var,methods) => by default is public.


class Customer{
    //default public
   id:number =1;
   //explict public
   public name:string ='customer';
   //private 
   private invoice:number =1000;

   //default public methods
   calculateInvoice() : number{
       return this.invoice;
   }
   //implicit public methods
   public calculateInvoice1() : number{
    return this.invoice;
   }
   private calculateInvoice2() : number{
    return this.invoice;
   }
}

let cust = new Customer();

console.log(cust.id,cust.name);
//console.log(cust.invoice);
//console.log(cust.calculateInvoice2());
//////////////////////////////////////////////////////////////////////////////////////////////

private,public usecases:


class Order{
    orderId:number;
    invoiceValue:number;
    productName:string;
    constructor(orderId:number,invoiceValue:number,productName:string){
      this.orderId = orderId  ;
      this.invoiceValue = invoiceValue;
      this.productName = productName;
    }

}

variables types:

1.instance variable
  variable declared inside class
2.local variables
  variables are declared inside method(including constructor)
  or method args / constructor args

default scope of instance variables  all are public

Note:
 how to reduce variable declarations(instance variable declaration)

Typescript provides a facility to "Treat local variable as instance variable: constructor 
args"

 constructor args can be converted from local to instance variables

 why : to reduce code.

How to convert local variables into instance variables?

 "Add" -public / private keywords in the constructor args



class Order{
    //instancevariabe
    constructor(public orderId:number=1,public invoiceValue:number=0,
        public productName:string='defaultProduct',private passcode:string='pass'){
      this.orderId = orderId  ;
      this.invoiceValue = invoiceValue;
      this.productName = productName;
    }
}

let order = new Order()
order.productName = 'Phone'
//order.password ='test'
console.log(order);

Still the above can be refactored.



/**
class Order{
    //instancevariabe
    orderId:number;
    invoiceValue:number;
    productName:string;
    //localvariable
    constructor(orderId:number,invoiceValue:number,productName:string){
      this.orderId = orderId  ;
      this.invoiceValue = invoiceValue;
      this.productName = productName;
    }

}
 */
/** 
class Order{
    //instancevariabe
    constructor(public orderId:number=1,public invoiceValue:number=0,
        public productName:string='defaultProduct',private passcode:string='pass'){
      this.orderId = orderId  ;
      this.invoiceValue = invoiceValue;
      this.productName = productName;
    }
}
*/
class Order{
    //instancevariabe
    constructor(public orderId:number=1,public invoiceValue:number=0,
        public productName:string='defaultProduct',private passcode:string='pass'){
    }
}

let order = new Order(45,8999)
order.productName = 'Phone'
//order.password ='test'
console.log(order);

//////////////////////////////////////////////////////////////////////////////////////////////

Hierachy : HAS-A dependency injection && is-a : inheritance
..........................................................



//has-a and dependency injection

class Product {
    constructor(public id:number=1,public name:string='default'){

    }
}
class Order{
   //has-a 
   constructor(public orderId:number=1,public product:Product=new Product()){

   }
}
//
let product = new Product(23,'Phone');

//dependency injection : object reference is bound with other objects
let order = new Order(3333,product);

console.log(order.orderId,order.product.name);

//////////////////////////////////////////////////////////////////////////////////////////

IS-A : Inheritance:

implementation
1.class based inheritance
2.interfaces

//interface : generic class can be used with any class implementations.

interface CalculateInterest{
    calculateInterest():number;
}

//inheritance
abstract class Account implements CalculateInterest{
     constructor(){
         console.log('Account class')
     }
//  //override
  public calculateInterest():number{
       return 10;
  }
  //abstract methods
  abstract withdraw():number;
}
class SavingsAccount extends Account{
    constructor(){
        super();
      console.log('Savings account')
    }
  //overriding(method definining)
  public calculateInterest():number{
    return 100 * super.calculateInterest();
  }
  withdraw(){
      return 1000;
  }
}
let sb = new SavingsAccount();
console.log(sb.calculateInterest());

/////////////////////////////////////////////////////////////////////////////////////////////

Advanced types:

1.Object type

literal object  and how to set type for that


let emp = {
    id:1,
    name:'subramanian'
};

object types :

1.class as type.

class EmployeeType{
  //properties
  id:number;
  name:string;
}

let emp:EmployeeType = {
    id:1,
    name:'Subramanian'
    //name:3434
};

///i am going to design type class for employee.

id,name,city,state,country,department,salary


Note:
 when you create object from the type, you should have all the properties which have 
represented type class.

i dont want all the fields, based on req, i may skip some fields

Types of properties
 ->Optional properties - ?
 ->required properties


class EmployeeType{
  //required properties
  id:number;
  name:string;
  //optional properties
  city?:string;
  state?:string;
  salary?:number;
}

let emp:EmployeeType = {
    id:1,
    name:'Subramanian'
    //name:3434
};

let emp1:EmployeeType = {
    id:1,
    name:'Subramanian',
    salary:8999
    //name:3434
};

2.interface as type




//literal objects
//class as type

class EmployeeType{
  //required properties
  id:number;
  name:string;
  //optional properties
  city?:string;
  state?:string;
  salary?:number;
}

let emp:EmployeeType = {
    id:1,
    name:'Subramanian'
    //name:3434
};

let emp1:EmployeeType = {
    id:1,
    name:'Subramanian',
    salary:8999
    //name:3434
};

//interface as type
interface  AccountType{
    id:number;
    name:string;
    balance?:number;
}
let sb:AccountType ={
    id:1,
    name:'Test',
    balance:20
}

let loanaccount:AccountType ={
    id:1,
    name:'Test',
    balance:20
}
//type

type CustomerType = {
    id:number,
    name:string;
    city?:string;
};
let cust:CustomerType = {
   id:1,
   name:"Customer",
   city : 'Coimbatore'
}
///////////////////////////////////////////////////////////////////////////////////////////

Arrays Types:
.............

1.normal syntax
2.generics syntax



//arrays

//syntax 1
let list:number[] = [1,2,3,4];
//syntax 2: generics : array of numbers
let numList:Array<number> =[1,23,45,89];

//complex array : array of Users

class User{
    id:number;
    name:string;
}
let users:Array<User> = [{id:1,name:"A1"},{id:2,name:"A2"},{id:3,name:"A3"}];

///////////////////////////////////////////////////////////////////////////////////////////
ES 6 modules ; to share code across files:

import,export,export default.

src/types/todotype.ts

export class Todo{
    userId:number;
    id:number;
    title:string;
    completed:boolean;
}
src/mockdata/todos.ts

src/services/todoservice.ts
import TODOS from '../mockdata/TODOS';
import { Todo } from '../types/todotype';

class TodoService{
    constructor(){

    }
    // findAllTodos():Todo[]{
    //     return TODOS;
    // }
    findAllTodos():Array<Todo>{
        return TODOS;
    }

}
export default TodoService;

src/index.js
import TodoService from './services/TodoService';


function main(){

    //create TodoService Object and invoke findall method
    let todoService = new TodoService();
    let todos = todoService.findAllTodos();
    console.log(todos);

}
main();
/////////////////////////////////////////////////////////////////////////////////
Decorators:
..........

annotations: @annotation , @Override,@Entity,@Controller

 -meta programming : isloate the code logic from main program to ouside, when you 
req, you inject those features , into code during runtime.

Decorators are experimental feature in es7. but ts added this language with experimental
mode.

How to create our own decorators?

Steps:

1.declare decorator
  function , based on syntax
2.use the decorator
  you can use on class,method,field
  @functionname.


Rules for decorator

1.decorator function must take arg : The target(On which the decorator is used)


//decorator declaration
function Course(target:any){

}

//attach decorator on class
@Course
class Student{
    constructor(){}
}



//decorator declaration
function Course(target:any){
  //decorator logic : course name
  Object.defineProperty(target.prototype,"subject",{
      value:'Typescript'
  });

}
//attach decorator on class
class StudentType{
    name:string;
    subject:string;
}

@Course
class Student{
    constructor(public name:string="default"){}
}
//student details
//let student = new Student("Subramanian") as StudentType;
let student = new Student("Subramanian") as any;
console.log(`${student.name} is learning ${student.subject}`);
///////////////////////////////////////////////////////////////////////////////////////

decorators with input:

what if i want to pass input



//decorator declaration
// function Course(target:any){
//   //decorator logic : course name
//   Object.defineProperty(target.prototype,"subject",{
//       value:'Typescript'
//   });

// }
//syntax

function Course(subject:string){
    //decorator logic : course name

    return function(target:any){
        Object.defineProperty(target.prototype,"subject",{
            value:subject
        });
    }
    
  
}
//attach decorator on class
class StudentType{
    name:string;
    subject:string;
}

@Course('React and Node')
//@Course({subject:'test',courseId:'',duration:5})
class Student{
    constructor(public name:string="default"){}
}
//student details
//let student = new Student("Subramanian") as StudentType;
let student = new Student("Subramanian") as any;
console.log(`${student.name} is learning ${student.subject}`);





function Course(subject:any){
    //decorator logic : course name

    return function(target:any){
       
        Object.defineProperty(target.prototype,"subject",{
            value:subject.subject
        });
        Object.defineProperty(target.prototype,"courseId",{
            value:subject.courseId
        });
        Object.defineProperty(target.prototype,"duration",{
            value:subject.duration
        });
    }
    
  
}
//attach decorator on class
class StudentType{
    name:string;
    subject:string;
}

//@Course('React and Node')
@Course({subject:'test',courseId:'',duration:5})
class Student{
    constructor(public name:string="default"){}
}
//student details
//let student = new Student("Subramanian") as StudentType;
let student = new Student("Subramanian") as any;
console.log(`${student.name} is learning ${student.subject}`);
Reply in private





















